import { parseDictionary } from "./parser.ts";

const SOURCE = new URL("./dictionary", import.meta.url);
const DESTINATION = new URL("./dictionary.ts", import.meta.url);

async function getPrevious(): Promise<null | string> {
  try {
    const { original } = await import("./dictionary.ts");
    return original;
  } catch (_) {
    return null;
  }
}
export async function build(checkFile: boolean): Promise<void> {
  const currentPromise = Deno.readTextFile(SOURCE);
  if (checkFile) {
    const [current, previous] = await Promise.all([
      currentPromise,
      getPrevious(),
    ]);
    if (current === previous) {
      return;
    }
  }
  console.log("Building dictionary...");
  const text = await currentPromise;
  const json = JSON.stringify(parseDictionary(text), undefined, 2);
  const original = JSON.stringify(text);
  const code = `\
// This code is autogenerated

import { Dictionary } from "./type.ts";

export const dictionary: Dictionary = ${json};

export const original = ${original};
`;
  await Deno.writeTextFile(DESTINATION, code);
}
if (import.meta.main) {
  await build(true);
}
